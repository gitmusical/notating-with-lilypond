title: Notating with LilyPond
tagline: Learn how to notate music with LilyPond
description: LilyPond is an open source technology for notating music in plain text files. In this course, we'll cover the fundamentals of music notation in LilyPond.
template:
  repo: notating-with-lilypond-template
  name: notating-with-lilypond

# ---
# Step 1: change a note
# prep for first step
before: 
  - type: updateBranchProtection
  - type: createPullRequest
    title: New Song
    head: twinkle-twinkle # template: create a branch with twinkle twinkle, mess up one note, mess up one rhythm
    body: 01_fix-note.md
    data:
      editUrl: '%payload.repository.html_url%/edit/twinkle-twinkle/twinkle-twinkle.ly?pr=/%payload.repository.full_name%/pull/1'
steps:

  - title: Correct the melody
    description: Change a note to correct the melody
    event: pull_request.synchronize
    link: '{{ repoUrl }}/pull/1'
    actions:

    # feedback for step 1: 
      - type: getFileContents
        filename: twinkle-twinkle.ly
        action_id: twinkleFile
      - type: gate
        left: /^\s*c8\\mf\s+c\s+g'\s+g\s*$/gm # create regex
        operator: test
        right: '%actions.twinkleFile%'
        else:
        - type: respond
          with: 01e_retry-note.md

# ---
# Step 2: Change a rhythm
  # user changes rhythm

      # prep for step 2
      - type: respond
        with: 02_change-rhythm.md
        data:
          editUrl: '%payload.repository.html_url%/edit/twinkle-twinkle/twinkle-twinkle.ly?pr=/%payload.repository.full_name%/pull/1'

  - title: Change a rhythm
    description: Change the notation of note duration to match the traditional rhythm
    event: pull_request.synchronize
    link: '{{ repoUrl }}/pull/1'
    actions:

    # feedback for step 2: 
    # - check if they changed a rhythm
      - type: getFileContents
        filename: twinkle-twinkle.ly
        action_id: twinkleFile
      - type: gate
        every: true
        gates:
          - left: /^\s*f8\s+f\s+e\s+e\s*$/gm # create regex
            operator: test
            right: '%actions.twinkleFile%'
          - left: /^\s*d\s+d\s+c4\s*$/gm
            operator: test
            right: '%actions.twinkleFile%'
        else:
    # - respond if they did it or not (possibly ask to redo)
    # - tell them how to play it
        - type: respond
          with: 02e_retry-rhythm.md

# ---
# Step 3: Change time signature
  # user to change time signature
  # prep for step 3
      - type: respond
        with: 03_time-signature.md
        data:
          editUrl: '%payload.repository.html_url%/edit/twinkle-twinkle/twinkle-twinkle.ly?pr=/%payload.repository.full_name%/pull/1'

  - title: Change the time signature
    description: Specify a time signature of 2/4
    event: pull_request.synchronize
    link: '{{ repoUrl }}/pull/1'
    actions:

  # feedback for step 3:
  # - check if they changed a time sig
  # - respond if they did it or not (possibly ask to redo)
      - type: getFileContents
        filename: twinkle-twinkle.ly
        action_id: twinkleFile
      - type: gate
        left: /^\s*\\time\s+2\/4\s*$/gm # create regex
        operator: test
        right: '%actions.twinkleFile%'
        else:
        - type: respond
          with: 03e_retry-time-signature.md
  # - tell them how to play it

# ---
# Step 4: Multiple notes (chord)
  # prep for step 4
      - type: respond
        with: 04_chords.md
        data:
          editUrl: '%payload.repository.html_url%/edit/twinkle-twinkle/twinkle-twinkle.ly?pr=/%payload.repository.full_name%/pull/1'

  # user to create or change a chord:
  - title: Create a chord
    description: Create a chord with C and G on the last note of the song
    event: pull_request.synchronize
    link: '{{ repoUrl }}/pull/1'
    actions:

  # feedback for step 4:
      - type: getFileContents
        filename: twinkle-twinkle.ly
        action_id: twinkleFile
      - type: gate
        left: /^\s*d\s+d\s+<\s*c\s+g\s*>4\s*$/gm # create regex
        operator: test
        right: '%actions.twinkleFile%'
        else:
        - type: respond
          with: 04e_retry-chord.md

# ---
# Step 5: Change key signature
  # user to: change key signature
# prep for step 5:
      - type: respond
        with: 05_key-signature.md
        data:
          editUrl: '%payload.repository.html_url%/edit/twinkle-twinkle/twinkle-twinkle.ly?pr=/%payload.repository.full_name%/pull/1'

  - title: Change the key signature
    description: Change the key signature from C major to C minor
    event: pull_request.synchronize
    link: '{{ repoUrl }}/pull/1'
    actions:

  # feedback for step 5:
      - type: getFileContents
        filename: twinkle-twinkle.ly
        action_id: twinkleFile
      - type: gate
        left: /^\s*\\key\s+c\s+\\minor\s*$/gm # create regex
        operator: test
        right: '%actions.twinkleFile%'
        else:
        - type: respond
          with: 05e_retry-key-signature.md

# ---
# Step 6: Accidentals
  # user to: add an accidental
  # prep for step 6:
      - type: respond
        with: 06_accidentals.md
        data:
          editUrl: '%payload.repository.html_url%/edit/twinkle-twinkle/twinkle-twinkle.ly?pr=/%payload.repository.full_name%/pull/1'

  - title: Add an accidental
    description: Add a flat on the second A note
    event: pull_request.synchronize
    link: '{{ repoUrl }}/pull/1'
    actions:

  # feedback for step 6:
      - type: getFileContents
        filename: twinkle-twinkle.ly
        action_id: twinkleFile
      - type: gate
        left: /^\s*a\s+aes\s+<\s*g\s+d\s*>4\s*$/gm # create regex
        operator: test
        right: '%actions.twinkleFile%'
        else:
        - type: respond
          with: 06e_retry-accidental.md

# ---
# Step 7: Dynamics
  # user to: add dynamic marking
  # prep for step 7:
      - type: respond
        with: 07_dynamics.md
        data:
          editUrl: '%payload.repository.html_url%/edit/twinkle-twinkle/twinkle-twinkle.ly?pr=/%payload.repository.full_name%/pull/1'

  - title: Add a dynamic marking
    description: Add a marking for piano on the first F note
    event: pull_request.synchronize
    link: '{{ repoUrl }}/pull/1'
    actions:

  # feedback for step 7:
      - type: getFileContents
        filename: twinkle-twinkle.ly
        action_id: twinkleFile
      - type: gate
        left: /^\s*f8\\p\s+f\se\se\s*$/gm # create regex
        operator: test
        right: '%actions.twinkleFile%'
        else:
        - type: respond
          with: 07e_retry-dynamic.md

# ---
# Step 8: Approve and merge
# user to: approve and merge their PR
  # prep for step 8
      - type: requestReviewFromRegistrant
      - type: respond
        with: 08_merge.md

  - title: Approve and merge 
    description: Approve and merge the pull request
    event: pull_request.closed
    link: '{{ repoUrl }}/pull/1'
    actions:

    #feedback for step 8
    - type: createPullRequest
      title: Congratulations
      body: 08_congratulations.md
      head: congratulations
      action_id: finalPr
    - type: respond
      with: 08_next.md
      data:
        prLink: '%actions.finalPr.data.html_url%'
